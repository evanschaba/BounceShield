name: CD Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        target: [x86_64-unknown-linux-gnu, x86_64-apple-darwin, aarch64-apple-darwin]
        exclude:
          - os: ubuntu-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: aarch64-apple-darwin
          - os: macos-latest
            target: x86_64-unknown-linux-gnu
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
      discussions: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Rust (nightly)
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: nightly

    - name: Install Target for cross-compiling (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: rustup target add x86_64-unknown-linux-gnu

    - name: Install Target for cross-compiling (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        rustup target add x86_64-apple-darwin
        rustup target add aarch64-apple-darwin

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cargo
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install Cross-Compilation Tools (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-multilib g++-multilib

    - name: Install Cross-Compilation Tools (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install FiloSottile/musl-cross/musl-cross

    - name: Clean previous build artifacts
      run: cargo clean

    - name: Build for macOS
      if: matrix.os == 'macos-latest'
      run: |
        cargo build --release --target ${{ matrix.target }} --verbose
        ls -la target/${{ matrix.target }}/release/

    - name: Build for Linux (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cargo build --release --target x86_64-unknown-linux-gnu --bin bounce_shield --verbose
        ls -la target/x86_64-unknown-linux-gnu/release/

    - name: Package Binary (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p release/mac
        cp target/${{ matrix.target }}/release/bounce_shield release/mac/bounce_shield-${{ matrix.target }}
        tar -czf release/mac/bounce_shield-${{ matrix.target }}.tar.gz -C release/mac bounce_shield-${{ matrix.target }}

    - name: Package Binary (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p release/linux
        cp target/x86_64-unknown-linux-gnu/release/bounce_shield release/linux/bounce_shield
        tar -czf release/linux/bounce_shield-linux.tar.gz -C release/linux bounce_shield

    - name: Create or Update GitHub Release and Upload Assets
      id: create_update_release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          release/mac/bounce_shield-${{ matrix.target }}.tar.gz,
          release/linux/bounce_shield-linux.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate Changelog
      run: echo "# Good things have arrived" > ${{ github.workspace }}-CHANGELOG.txt
    - name: Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: | 
          release/mac/bounce_shield-${{ matrix.target }}.tar.gz,
          release/linux/bounce_shield-linux.tar.gz
        body_path: docs/RELEASE.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}